<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cast_channel.proto

namespace Cast_channel;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cast_channel.CastMessage</code>
 */
class CastMessage extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;</code>
     */
    protected $protocol_version = 0;
    /**
     * source and destination ids identify the origin and destination of the
     * message.  They are used to route messages between endpoints that share a
     * device-to-device channel.
     * For messages between applications:
     *   - The sender application id is a unique identifier generated on behalf of
     *     the sender application.
     *   - The receiver id is always the the session id for the application.
     * For messages to or from the sender or receiver platform, the special ids
     * 'sender-0' and 'receiver-0' can be used.
     * 
     * For messages intended for all endpoints using a given channel, the
     * wildcard destination_id '*' can be used.
     *
     * Generated from protobuf field <code>string source_id = 2;</code>
     */
    protected $source_id = '';
    /**
     * Generated from protobuf field <code>string destination_id = 3;</code>
     */
    protected $destination_id = '';
    /**
     * This is the core multiplexing key.  All messages are sent on a namespace
     * and endpoints sharing a channel listen on one or more namespaces.  The
     * namespace defines the protocol and semantics of the message.
     *
     * Generated from protobuf field <code>string namespace = 4;</code>
     */
    protected $namespace = '';
    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.PayloadType payload_type = 5;</code>
     */
    protected $payload_type = 0;
    /**
     * Depending on payload_type, exactly one of the following optional fields
     * will always be set.
     *
     * Generated from protobuf field <code>string payload_utf8 = 6;</code>
     */
    protected $payload_utf8 = null;
    /**
     * Generated from protobuf field <code>bytes payload_binary = 7;</code>
     */
    protected $payload_binary = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $protocol_version
     *     @type string $source_id
     *           source and destination ids identify the origin and destination of the
     *           message.  They are used to route messages between endpoints that share a
     *           device-to-device channel.
     *           For messages between applications:
     *             - The sender application id is a unique identifier generated on behalf of
     *               the sender application.
     *             - The receiver id is always the the session id for the application.
     *           For messages to or from the sender or receiver platform, the special ids
     *           'sender-0' and 'receiver-0' can be used.
     *           
     *           For messages intended for all endpoints using a given channel, the
     *           wildcard destination_id '*' can be used.
     *     @type string $destination_id
     *     @type string $namespace
     *           This is the core multiplexing key.  All messages are sent on a namespace
     *           and endpoints sharing a channel listen on one or more namespaces.  The
     *           namespace defines the protocol and semantics of the message.
     *     @type int $payload_type
     *     @type string $payload_utf8
     *           Depending on payload_type, exactly one of the following optional fields
     *           will always be set.
     *     @type string $payload_binary
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CastChannel::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;</code>
     * @return int
     */
    public function getProtocolVersion()
    {
        return $this->protocol_version;
    }

    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setProtocolVersion($var)
    {
        GPBUtil::checkEnum($var, \Cast_channel\CastMessage\ProtocolVersion::class);
        $this->protocol_version = $var;

        return $this;
    }

    /**
     * source and destination ids identify the origin and destination of the
     * message.  They are used to route messages between endpoints that share a
     * device-to-device channel.
     * For messages between applications:
     *   - The sender application id is a unique identifier generated on behalf of
     *     the sender application.
     *   - The receiver id is always the the session id for the application.
     * For messages to or from the sender or receiver platform, the special ids
     * 'sender-0' and 'receiver-0' can be used.
     * 
     * For messages intended for all endpoints using a given channel, the
     * wildcard destination_id '*' can be used.
     *
     * Generated from protobuf field <code>string source_id = 2;</code>
     * @return string
     */
    public function getSourceId()
    {
        return $this->source_id;
    }

    /**
     * source and destination ids identify the origin and destination of the
     * message.  They are used to route messages between endpoints that share a
     * device-to-device channel.
     * For messages between applications:
     *   - The sender application id is a unique identifier generated on behalf of
     *     the sender application.
     *   - The receiver id is always the the session id for the application.
     * For messages to or from the sender or receiver platform, the special ids
     * 'sender-0' and 'receiver-0' can be used.
     * 
     * For messages intended for all endpoints using a given channel, the
     * wildcard destination_id '*' can be used.
     *
     * Generated from protobuf field <code>string source_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSourceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->source_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string destination_id = 3;</code>
     * @return string
     */
    public function getDestinationId()
    {
        return $this->destination_id;
    }

    /**
     * Generated from protobuf field <code>string destination_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDestinationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->destination_id = $var;

        return $this;
    }

    /**
     * This is the core multiplexing key.  All messages are sent on a namespace
     * and endpoints sharing a channel listen on one or more namespaces.  The
     * namespace defines the protocol and semantics of the message.
     *
     * Generated from protobuf field <code>string namespace = 4;</code>
     * @return string
     */
    public function getNamespace()
    {
        return $this->namespace;
    }

    /**
     * This is the core multiplexing key.  All messages are sent on a namespace
     * and endpoints sharing a channel listen on one or more namespaces.  The
     * namespace defines the protocol and semantics of the message.
     *
     * Generated from protobuf field <code>string namespace = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setNamespace($var)
    {
        GPBUtil::checkString($var, True);
        $this->namespace = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.PayloadType payload_type = 5;</code>
     * @return int
     */
    public function getPayloadType()
    {
        return $this->payload_type;
    }

    /**
     * Generated from protobuf field <code>.cast_channel.CastMessage.PayloadType payload_type = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPayloadType($var)
    {
        GPBUtil::checkEnum($var, \Cast_channel\CastMessage\PayloadType::class);
        $this->payload_type = $var;

        return $this;
    }

    /**
     * Depending on payload_type, exactly one of the following optional fields
     * will always be set.
     *
     * Generated from protobuf field <code>string payload_utf8 = 6;</code>
     * @return string
     */
    public function getPayloadUtf8()
    {
        return isset($this->payload_utf8) ? $this->payload_utf8 : '';
    }

    public function hasPayloadUtf8()
    {
        return isset($this->payload_utf8);
    }

    public function clearPayloadUtf8()
    {
        unset($this->payload_utf8);
    }

    /**
     * Depending on payload_type, exactly one of the following optional fields
     * will always be set.
     *
     * Generated from protobuf field <code>string payload_utf8 = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setPayloadUtf8($var)
    {
        GPBUtil::checkString($var, True);
        $this->payload_utf8 = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes payload_binary = 7;</code>
     * @return string
     */
    public function getPayloadBinary()
    {
        return isset($this->payload_binary) ? $this->payload_binary : '';
    }

    public function hasPayloadBinary()
    {
        return isset($this->payload_binary);
    }

    public function clearPayloadBinary()
    {
        unset($this->payload_binary);
    }

    /**
     * Generated from protobuf field <code>bytes payload_binary = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setPayloadBinary($var)
    {
        GPBUtil::checkString($var, False);
        $this->payload_binary = $var;

        return $this;
    }

}

